% Regression tests for the XCP_CAN
~ python3_only vcan_socket needs_root linux

# More information at http://www.secdev.org/projects/UTscapy/


############
############
+ Configuration of CAN virtual sockets
= Imports
load_layer("can")
conf.contribs['CAN']['swap-bytes'] = False
import threading, six
from subprocess import call
from scapy.consts import LINUX

= Definition of constants, utility functions and mock classes
iface0 = "vcan0"
iface1 = "vcan1"


= Initialize a virtual CAN interface
~ vcan_socket needs_root linux
if 0 != call("cansend %s 000#" % iface0, shell=True):
    # vcan0 is not enabled
    if 0 != call("sudo modprobe vcan", shell=True):
        raise Exception("modprobe vcan failed")
    if 0 != call("sudo ip link add name %s type vcan" % iface0, shell=True):
        print("add %s failed: Maybe it was already up?" % iface0)
    if 0 != call("sudo ip link set dev %s up" % iface0, shell=True):
        raise Exception("could not bring up %s" % iface0)

if 0 != call("cansend %s 000#" % iface0, shell=True):
    raise Exception("cansend doesn't work")

if 0 != call("cansend %s 000#" % iface1, shell=True):
    # vcan1 is not enabled
    if 0 != call("sudo modprobe vcan", shell=True):
        raise Exception("modprobe vcan failed")
    if 0 != call("sudo ip link add name %s type vcan" % iface1, shell=True):
        print("add %s failed: Maybe it was already up?" % iface1)
    if 0 != call("sudo ip link set dev %s up" % iface1, shell=True):
        raise Exception("could not bring up %s" % iface1)

if 0 != call("cansend %s 000#" % iface1, shell=True):
    raise Exception("cansend doesn't work")

print("CAN should work now")

= Import CANSocket

from scapy.contrib.cansocket_python_can import *

import can as python_can
new_can_socket = lambda iface: CANSocket(iface=python_can.interface.Bus(bustype='virtual', channel=iface))
new_can_socket0 = lambda: CANSocket(iface=python_can.interface.Bus(bustype='virtual', channel=iface0), timeout=0.01)
new_can_socket1 = lambda: CANSocket(iface=python_can.interface.Bus(bustype='virtual', channel=iface1), timeout=0.01)

# utility function for draining a can interface, asserting that no packets are there
def drain_bus(iface=iface0, assert_empty=True):
    s = new_can_socket(iface)
    pkts = s.sniff(timeout=0.1)
    if assert_empty:
        assert len(pkts) == 0
    s.close()

print("CAN sockets should work now")

= Overwrite definition for vcan_socket systems native sockets
~ vcan_socket needs_root linux

if six.PY3 and LINUX:
    from scapy.contrib.cansocket_native import *
    new_can_socket = lambda iface: CANSocket(iface)
    new_can_socket0 = lambda: CANSocket(iface0)
    new_can_socket1 = lambda: CANSocket(iface1)


= Overwrite definition for vcan_socket systems python-can sockets
~ vcan_socket needs_root linux

if "python_can" in CANSocket.__module__:
    new_can_socket = lambda iface: CANSocket(iface=python_can.interface.Bus(bustype='socketcan', channel=iface, bitrate=250000), timeout=0.01)
    new_can_socket0 = lambda: CANSocket(iface=python_can.interface.Bus(bustype='socketcan', channel=iface0, bitrate=250000), timeout=0.01)
    new_can_socket1 = lambda: CANSocket(iface=python_can.interface.Bus(bustype='socketcan', channel=iface1, bitrate=250000), timeout=0.01)


= Verify that a CAN socket can be created and closed
s = new_can_socket(iface0)
s.close()


############
############

+ Basic operations

= Load module

load_contrib("automotive.xcp")

+ Tests on a virtual CAN-Bus

= Create sockets

sock1 = new_can_socket0()
sock2 = new_can_socket0()

sock1.basecls = CAN 


def ecu():
    start_time = time.time()
    cnt = 0
    while time.time() - start_time < 10:
        pkts = sock2.recv()
        if hasattr(pkts, "identifier") and hasattr(pkts, "data"):
            if (pkts.identifier == 0x112 and pkts.data[0] == 0xFF):
                #a = CAN(b'\x00\x00\x07\x01\x08\x00\x00\x00\xFF\xFF\xAA\x1A\x5B\xC3\x33\x06')
                a = CAN_XCP(identifier=0x701) / DTO(packet_id="POSITIVE") / CONNECT_DTO(
                        resource=1, comm_mode_basic=2, max_cto=3, max_dto=5,
                        xcp_protocol_layer_version_number_msb=6,
                        xcp_transport_layer_version_number_msb=7)
                sock2.send(a)
                cnt += 1
            if (pkts.identifier == 0x110 and pkts.data[0] == 0xFF):
                a = CAN(b'\x00\x00\x07\x00\x08\x00\x00\x00\xFF\xFF\xAA\x1A\x5B\xC3\x33\x06')
                sock2.send(a)
                cnt += 1
            if cnt >= 2:    
                return

thread = threading.Thread(target=ecu)
thread.start()
time.sleep(0.1)
scanner = XCP_SCANNER(sock1, 0x109, 0x112, False, False, timeout=0.05)
scanner.start_scan()
results = scanner.get_results()
res_ids = list()
req_ids = list()
for p in results:
    res_ids.append(p.get_response_id())
    req_ids.append(p.get_request_id())

thread.join()
assert len(results) == 2
assert 0x112 in req_ids
assert 0x701 in res_ids
assert 0x110 in req_ids
assert 0x700 in res_ids



+ Cleanup

= Delete vcan interfaces
~ vcan_socket needs_root linux

if 0 != call("sudo ip link delete %s" % iface0, shell=True):
        raise Exception("%s could not be deleted" % iface0)

if 0 != call("sudo ip link delete %s" % iface1, shell=True):
        raise Exception("%s could not be deleted" % iface1)

